Membrane Service Proxy Change Log
=============================================================================

* [release] 4.0.17

* [feature] Membrane's URL parsing algorithm can now be exchanged: For
  example by using <router><uriFactory allowIllegalCharacters="true" />...
  you can allow characters like '{' in any Membrane component requiring URI
  parsing (for example to proxy Microsoft SharePoint Server).

* [update] dependency json-schema-validator to 2.1.8. The JSON Schema
  Validaton draft v4 is now used, which might require some schema changes.

* [refactoring] the basic classes used by Membrane now don't depend on Groovy
  anymore. This means you can remove Groovy from the dependency list (or
  classpath) as long as you don't use a feature explicitly requiring it.

* [feature] a <login> interceptor's session can now be accessed by other
  Membrane components using exchange.getProperty("login-session"), if "login"
  is the ID of the <login> interceptor (which is the default).
  In combination with the last feature, this gives access to the user's
  password using
    ((Session)exchange.getProperty("login-session").
        getUserAttributes().get("password") .
  This can, for example used for further backend authentication.

* [feature] You can use <login exposeUserCredentialsToSession="true" ... />
  to add a user's username and password as userAttributes to the session.

* [release] 4.0.16

* [changed behavior] Set <router retryInit="true">, if you want the router
  to start even though some routes may not have been initialized yet (for
  example, because a WSDL could not be downloaded). These rules will be
  inactive (=not used for routing decissions).
  <router retryInitInterval=""> may be set to automatically try regular
  reinitialization. Also the admin trigger this through the <adminConsole>.
  
  This now applies to proxy, serviceProxy and soapProxy, if retryInit="true"
  is set.
  
  Since 4.0.13 until before 4.0.16, soapProxy exhibited this behavior by
  default, without any option to turn it off.

* [bugfix] fixed blueprint local bean parsing. Therefore, the OSGi deployment
  tutorial on
  http://membrane-soa.org/service-proxy-doc/4.0/deployment/osgi/servicemix-1.htm
  Part I (proxies.xml deployment in Karaf 3.0) now works again. Part II
  still needs some work

* [feature] implemented an <emailTokenProvider> used to send numeric tokens
  for <login> feature via email

* [enhancement] improved user agent recognition for Server Name Indication

* [release] 4.0.15

* [feature] experimental support for <if test="...some groovy expression...">

* [bugfix] close connections once dead ones are removed from the pool

* [changed behavior] updated to new Telekom SMS sending REST API 

* [release] 4.0.14 (release candidate) - built against Java 7

* [release] 4.0.13 (release candidate) - build against Java 8 (EA b120)

* [changed behavior] When starting a <soapProxy> and loading the WSDL fails,
  the subcomponents (for example a <validator>) will not be initialized.
  Only when the WSDL could finally be downloaded and the <soapProxy> has been
  initialized, the subcomponents' initialization will follow.

* [feature] added Blueprint support for the Membrane configuration language
  (defined by http://membrane-soa.org/schemas/proxies-1.xsd ) and replaced
  the old OSGi extender. See
  https://github.com/membrane/service-proxy/tree/master/osgi-extender/src/main/xml
  for sample configurations.

* [removed feature] removed the Karaf Extender: it has become pointless with 
  Membrane 4.X.
  Any Spring extender will claim a proxies.xml file for itself (as the
  4.X proxies.xml format is based on Spring) and this will not work:
  We are unable correctly define our own Spring namespace handlers in an
  OSGi environment. 

* [feature] support for server-side SSL with SNI (server name indication) when
  running with JRE 8 or above: simply declare multiple <serviceProxy>s
  with the same port (probably 443) using server-side SSL with different
  <ssl> definitions.
  When receiving an inbound SSL connection including an SNI header
  (containing the hostname desired by the client), Membrane will select the
  certificate based on the certificates' CN (common name) expressions. 

* [changed behavior] when using the <rest2Soap> feature, the HTTP response
  headers are now discarded by default when constructing the REST request.
  To keep them, you have to specify
    <http:response>
      [...]
      <headers keepSourceHeaders="true"> 
        [...]
      </headers>

* [release] 4.0.12 (release candidate)

* [bugfix] fixed release packaging

* [bugfix] ConnectionPool leaks connections (leaves them in CLOSE-WAIT)

* [release] 4.0.11 (release candidate)

* [bugfix] make transport/@reverseDNS configurable from proxies.xml

* [release] 4.0.10 (release candidate)

* [enhancement] support <soapProxy><path>/myPath</path> path rewriting with
  an explicit <wsdlInterceptor host="myHost" port="80" />.

* [feature] added with transport/@reverseDNS ("true" by default) the ability
  to switch off reverse DNS hostname lookups

* [release] 4.0.9 (release candidate)

* [development] OSGi: register Router as OSGi service; use log4j.properties,
  if present; handle Router in OSGi lifecycle

* [development] @MC.. annotations: (limited) support for spring config
  recreation

* [documentation] updated readmes, license files and file headers

* [enhancement] rest2soap now supports SOAP 1.2

* [usage improvement] if "proxies.xml" contains a syntax or schema error,
  only print a warning and do not start a hot deployment

* [new config] Membrane now automatically closes idle keep-alive connections
  when shutting down or restarting the spring context during hot deployment.
  Connections with active HTTP requests are forcibly closed by default after
  30 seconds. This value can be configured using
  <transport forceSocketCloseOnHotDeployAfter="30000" /> .

* [update config] relative file paths in proxies.xml are now relative to the
  location of proxies.xml

* [bugfix] rewriter regression

* [bugfix] resolve "c:\..." as location

* [release] 4.0.8 (early access)

* [update config] relative URLs within proxies.xml are now resolved relatively
  to the location of proxies.xml

* [bugfix] fixed resolving resources starting with "file:", "c:" or "/" in
  J2EE deployments

* [release] 4.0.7 (early access)

* [changed behavior] reduced default HTTP client keep-alive timeout to 4s, as
  newer Apache versions use 5s. Parse the HTTP response "Keep-Alive" header
  "timeout" and "max" parameters when the backend indicates other keep-alive
  values.
  
* [bugfix] small issues and regressions

* [changed behavior] Return HTTP status code 500 if too many "X-Forwarded-For"
  request headers are present, preventing infinite forwarding loops.
 
* [release] 4.0.6 (early access)

* [changed behavior] If a WSDL referenced by <soapProxy wsdl="..."> cannot be
  downloaded during startup, this <soapProxy> rule will be inactive.
  Reinitialization will be automatically attempted every 5 minutes (by default,
  configurable using <router retryInitInterval="300000">) or can be initiated
  manually through the admin console.

* [release] 4.0.5 (early access)

* [development]
  To extend Membrane's configuration language using the @MC... annotations,
  you now have to implement a Spring NamespaceHandler extending
  com.predic8.membrane.annot.AbstractNamespaceHandler . Use
  com.predic8.membrane.core.config.spring.NamespaceHandler as an example.

  @MCElement(global=..) is now called @MCElement(topLevel=..) to use XML Schema
  language.

* [update config] 
    <httpClient keepAliveTimeout="..." />,
    <httpClient><proxyConfiguration ... /></httpClient> and
    <transport httpClientRetries="..." />
  have been refactored into a syntax allowing a much more fine grained
  configuration. To simply get the old behavior working, use
    <httpClient>
      <httpClientConfig maxRetries="..">
        <connection keepAliveTimeout="..." />
        <proxy ... /> 
      </httpClientConfig>
    </httpClient>
  Every element and attribute shown here is optional: The minimal configuration
  is just <httpClient />.
  If you are interested in all the new things you can do with the
  httpClientConfig, have a look at the examples/proxy folder.
  
* All Apache HttpClient instances have been replaced by Membrane's HttpClient
  (the Apache HttpClient was formerly used to retrieve any secondary resource,
  for example WSDLs). This removes the runtime dependency.
  The element <httpClientConfig /> and its children can now be used to
  configure *any* HttpClient instance used anywhere in Membrane. This allows
  you to specify very precisely which outbound HTTP requests you want to use
  which proxy and which (basic) authentication credentials. 

* [update config]
  The "active" attribute has been <proxyConfiguration active="true" /> dropped,
  as users can simply remove the element.

* [new config] The host=".." attribute on <serviceProxy> and <soapProxy>
  elements can now contain spaces to separate multiple entries and asterisks as
  wildcards, eg. <serviceProxy host="predic8.com *.predic8.com">

* [new config]
  The optional "adjustHostHeader" was added to
  <httpClient adjustHostHeader="true" />.
  It can be ommitted, defaulting to "true".
  
  Iff adjustHostHeader="true" and <target host="mybackend.mycompany.com" />,
  the HttpClient will add the header "Host: mybackend.mycompany.com" to the
  request before forwarding it.
  
  The new configuration option adjustHostHeader="false" is interesting in
  service virtualization cases where Membrane is configured using
    <serviceProxy host="myservice.mycompany.com">
      <target host="machine353.mycompany.com" />
    </serviceProxy>,
  but where machine353 is using virtual hosts to distinguish which web
  application to forward requests to. The machine353 will analyze the "Host"
  header in the requests it receives. Using adjustHostHeader="false"
  will cause this "Host:" header to be "Host: myservice.mycompany.com" instead
  of "Host: mymachine353.mycompany.com".

* [changed behavior] Return HTTP 502 when TCP connection to target could not
  be established.

* [usage improvement]
  adminConsole/load balancer: don't refresh form
  adminConsole: IE8 fix

* [usage improvement] warn if validator/@skipFaults="true" for a non-WSDL
  validator

* [bugfix] absolute MEMBRANE_HOME on Linux

* [release] 4.0.4 (early access)

* [bugfix] fixed release build scripts

* [release] 4.0.3 (early access)

* renamed Maven modules
  com.predic8:membrane-esb* to
  org.membrane-soa.service-proxy.service-proxy*

* [bugfix] changed "Expect: 100-continue" handling to request the body from
  the client using "HTTP/1.1 100 Continue" only when needed. This allows
  WebDAV/git to work, as msysgit seems to have a client bug treating the
  status code 100 as the final code.

* [release] 4.0.2 (early access)

* [development] added message.getBodyAsStreamDecoded() which unapplies any
  "Content-Encoding" or XOP (XML-binary Optimized Packaging): this method
  should be used in most places instead of message.getBodyAsStream() .

* [release] 4.0.1 (early access)

* [bugfixes] merged patches from 3.4.X and 3.5.X: small fixes in the admin
  console, several regarding IE8. Fixed fileExchangeStore file name pattern
  and added the attribute <webServer docBase="..." generateIndex="true" />
  which displays directory indexes when a directory is requested and docBase
  points to an actual directory.

* [release] 4.0.0 (early access)

* [changed behavior] [update config] [development]
  The monitor-beans.xml configuration file has been merged into proxies.xml .
  The file proxies.xml is now a normal Spring context configuration file,
  and Spring is used to parse this file and manage the lifecycle of Membrane
  ESB's main objects defined in this file.
  (Note that for proxies.xml hot deployment to work, the Spring context class
  needs to implement com.predic8.membrane.core.TrackingApplicationContext, as
  does, for example, the class TrackingFileSystemXmlApplicationContext. - This
  class is automatically used by Membrane ESB's standalone distribution.)
  
  Annotations and a annotation processor (defined in the new module
  membrane-esb-annot) are used to generate Membrane ESB's XML schema document
  for the proxies.xml language as well as the Java source for the parser
  classes required by Spring. The core language is defined in the namespace
  http://membrane-soa.org/proxies/1/ described by the XML schema document
  found at http://membrane-soa.org/schemas/proxies-1.xsd .
  
  Language extensions can easily be implemented using a new separate namespace
  using the same annotations, as does, for example, the membrane-esb-war
  module.

* [release] 3.5.8

* [enhancement] adminConsole: support old IE versions

* [release] 3.5.7

* [bugfix] handle LDAPUserDataProvider/@passwordAttribute in spring config
  correctly

* [release] 3.5.6

* [new] The <ssl> element in proxies.xml now has a new optional attribute
  (and default value) ignoreTimestampCheckFailure="false".

* [changed behavior] The rest2soap interceptor now ignores the "responseType"
  attribute to choose the response type (XML or JSON). Instead the HTTP
  "Accept" header is used: If "Accept: application/json" is set, JSON is
  produced.

* [improvement] the default log level is now INFO.

* [new] The <httpClient> element in conf/monitor-beans.xml has now two new 
  valid attributes (with default values): failOverOn5XX="false" and
  keepAliveTimeout="30000" 

* [update config] examples/rest2soap-json/strip-env.xsl was updated to remove
  the XML namespace prefixes (the JSON key 'ns1:getBank' is now 'getBank')

* [release] 3.5.5

* [bugfix] getBodyAsStream() now returns correct data for chunked
  transfer-encoding

* [release] 3.5.4

* [improvement] adminConsole and .war deployment (add-serviceProxy form)

* [bugfix] absolute MEMBRANE_HOME on Linux

* [bugfix] fixed shebang lines in Linux startup scripts

* [new] added serviceProxy/@ip to bind a socket only on a specific IP
  (for hosts with multiple IPs)

* [bugfix] keep-alive and custom interceptors: always read the request body
  before answering the request

* [bugfix] reduced memory leakage of any in-memory exchange store.

* [new] these previously mentioned changes allow Membrane to be used as a
  WebDAV (e.g. Subversion) proxy

* [update config] reverseProxying now rewrites an request "Destination"
  headers (see RFC 2518 section 9.3; also used by WebDAV). This requires
  the reverseProxying interceptor to be declared between the "dispatching"
  and "userFeature" interceptors in monitor-beans.xml, as is demonstrated
  by the sample config files.

* [bugfix] reverseProxying interceptor and HTTPS

* [new] regExReplacer can now also be used to change message headers using
  target="header"

* [new] LoginInterceptor authenticates users agains some UserDataProvider
  implementation (e.g. LDAP), verifies a token (for example sent via a text
  messaging service) and forwards authenticated requests to the backend.

* [release] 3.5.3

* [documentation] improved proxies.xml doc and custom-interceptor example

* [bugfix] in adminConsole: fixed access to RESTful resources when deployed
  in a J2EE container with a context path other than '/'
  
* [development improvement] automatically read message body from incoming
  HTTP connections before sending a response (this removes the requirement
  from terminating interceptors to do so)

* [improvement] accessControl: avoid unnecessary DNS lookups and use the
  DNSCache class for remaining ones

* [release] 3.5.2

* [documentation] For a more verbose explanation of the new rest2soap
  functionality see  
  http://httprouter.wordpress.com/2012/08/30/converting-json-rest-requests-to-soap/ .

* [update config] the rest2soap interceptor now uses the namespace
  http://membrane-soa.org/schemas/http/v1/ to identify the root element
  of the in-between XML document (called "<request>").
  (To upgrade from the usage of the old rest2soap interceptor, this means
  that you cannot use the XPath "/request" anymore in your XSLT documents:
  E.g. use "/*[local-name()='request']" instead. See blog post for example.)
    
* [new] the rest2soap interceptor integrates HTTP message bodies into the
  in-between XML document (the input for the request XSLT transformation).
  If the HTTP message body is XML formatted, the document is appended
  to the <body> node. If the message body is JSON formatted, it is first
  converted into XML and then appended.
  Also see the blog post mentioned above.
  
* [new] the rest2soap interceptor now allows to set response status code,
  message and headers from the XSLT document: if the response XSL
  transformation yields an XML document with a root element named "response"
  and with a namespace of http://membrane-soa.org/schemas/http/v1/ , this
  document will be processed and "unwrapped" to fill the response. See the
  response XSLT document in the blog post mentioned above for a sample 
  response XSLT using this new feature.

* [new example] versioning/xslt shows how SOAP Web Service versioning can
  be implemented using XSLT.

* [release] 3.5.1

* [documentation] new SOAP quick start guide uses <soapProxy>

* [update config] <path isRegExp="false">abc</path> in proxies.xml now means
  path.startsWith("abc") instead of path.contains("abc") - change it to
  <path isRegExp="true">.*\Qabc\E.*</path> if you actually want it to
  mean the latter.

* [bugfix] admin calls tab: also track responses without bodies

* [improvement] lots of small things in the admin interface

* [new] <urlNormalizer> interceptor can remove "/abc/../" parts from the
  URL path (caused by old HTTP clients not normalizing themselves)

* [bugfix] fixed regressions in logging-jdbc and SSL-* examples introduced
  in 3.5.0

* [release] 3.5.0

* [development] split parsing from initialization for all ServiceProxy and
  Interceptors objects. The back-reference to router is not known during
  parsing anymore.

* [new] tab "calls" in the admin console showing the last few requests with
  all their headers and bodys. storage is limited by default to 1MB.

* [bugfix] correctly handle repeated (background) init of GroovyInterceptor

* [new] added <soapProxy wsdl="..."> to avoid having to configure
  a "/services/service(|\?wsdl|\?xsd=.*)"-style regex on a
  SOAP <serviceProxy>.

* [bugfix] links on services index page use wrong port when running as
  servlet 

* [release] 3.4.3

* [usage improvement] servlet: port="..." is now ignored

* [usage improvement] standalone: if port="..." is missing, port="80" is
  used by default.

* [usage] Exchange properties of type String can be used from XSLT
  stylesheets

* [improvement] Groovy scripts are parsed only once at startup; only one
  instance of GroovyShell is used globally (improved performance and
  resource management)

* [bugfix] non-SOAP XML messages now cause validation errors in the WSDL
  validator

* [update config] The default servlet monitor-beans.xml configuration now
  removes HTTP headers which are managed by the web server ("Connection",
  "Content-Length", etc.)

* [usage improvement] The format of the error page for uncaught exceptions
  thrown from interceptors now depends on the request: For SOAP messages,
  SOAP faults are returned; for JSON requests, JSON error messages are
  returned; for XML requests, an XML error elements are returned. (eased
  parsing for clients)

* [new] added SoapOperationExtractor interceptor 

* [release] 3.4.2

* [update config] <validator wsdl="..." skipFaults="true" /> can be used
  to accept any SOAP Fault message body as valid (even if it is not valid
  by the WSDL's XSD schemas).

* [new] added wsdlPublisher interceptor (for backends that do not provide
  WSDLs on their own)

* [improvement] background initialization for XSLT transformers

* [usage improvement] track processing times for adminConsole

* [release] 3.4.1
