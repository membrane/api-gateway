<?xml version="1.0" encoding="UTF-8"?>
<!-- 

  Copyright 2009 predic8 GmbH, www.predic8.com Licensed under the Apache 
  License, Version 2.0 (the "License"); you may not use this file except in 
  compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 
  Unless required by applicable law or agreed to in writing, software distributed 
  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
  OR CONDITIONS OF ANY KIND, either express or implied. See the License for 
  the specific language governing permissions and limitations under the License. 

-->
<spring:beans xmlns="http://www.predic8.com/spring/conf/1/"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
					    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
					    http://www.predic8.com/spring/conf/1/ http://membrane-soa.org/schemas/proxies-1.xsd">
  
	<router exchangeStore="exchangeStore">
		<property name="ruleManager">
	      <bean class="com.predic8.membrane.core.RuleManager" />
		</property>
	    <property name="configurationManager" ref="configurationManager" />
    </router>

  <transport>
  
    <!-- 
   	Thread Pool Configuration
   	============================
   	To serve client requests a thread pool is consulted. See
   	
   	http://download.oracle.com/javase/6/docs/api/java/util/concurrent/ThreadPoolExecutor.html	
   	
   	for details about the thread pool. 
   	The default for maxThreadPoolSize is unlimited. To limit the pool size 
   	uncomment the property maxThreadPoolSize.
    -->
    <!-- <property name="maxThreadPoolSize" value="500" />  -->
    <property name="coreThreadPoolSize" value="20" />
    
    <!-- 
    The interceptors listed here are invoked with every message exchange
    -->
    <interceptors>
    	<ruleMatching/>
    	<dispatching/>
    	<exchange store="exchangeStore" />

        <!--
        Rewriting of URLs in WSDL documents 
        =================================== 
        The WSDLInterceptor modifies the endpoint location and URLs of schema includes 
        and imports. For the rewritten URLs the protocol, hostname and port are extracted 
        from the request header. The hostname and port is taken from the Host header 
        field. 
        -->
        <bean class="com.predic8.membrane.core.interceptor.WSDLInterceptor">
          
          <!--  
          <property name="registryWSDLRegisterURL" value="http://service-repository.com/register/wsdl" /> 
          -->
          
          <!--
          To set static values for the rewritten URLs instead of values from 
          the WSDL requested uncomment the following elements.
          -->
          <!--
          <property name="host" value="myhost" /> 
          <property name="protocol" value="https" /> 
          <property name="port" value="80" />
          -->
          
        </bean>

		<!--  
	    Saving messages into files
	    ============================
	    The FileExchangeStore saves all captured messages to disk. 
	    Uncomment the following bean and set the value of the property dir 
	    to the folder where you want to save messages. 
  		-->
  		<!--  
	    <bean class="com.predic8.membrane.core.interceptor.ExchangeStoreInterceptor">
	      <property name="exchangeStore">
	        <bean class="com.predic8.membrane.core.exchangestore.FileExchangeStore">
	          <property name="dir" value="C:/temp" />
	          <property name="saveBodyOnly" value="false" />
	        </bean>
	      </property>
	    </bean>
  		-->	

        <!-- 
        Storing Exchange Statistics in a Database 
        ========================================= 
        You can store exchange statistical data on permanent storage. Uncomment 
        the following bean definition and configure the bean below. Do not forget 
        to provide a JDBC connector jar file in the lib directory. 
        -->
        <!--
        <bean class="com.predic8.membrane.core.interceptor.statistics.StatisticsJDBCInterceptor" init-method="init" > 
          <property name="dataSource" ref="dataSource" /> 
          <property name="postMethodOnly" value="true" /> 
          <property name="soapOnly" value="true" /> 
        </bean>
        -->

        <!--
        Logging Router access to CSV 
        ======================================= 
        You can store exchange metadata in an CSV file. The data will be appended 
        to the given file, and can be imported into Excel. 
        -->
        <!-- 
        <bean class="com.predic8.membrane.core.interceptor.statistics.StatisticsCSVInterceptor">
          <property name="fileName" value="C:\temp\exc-statistics.csv" /> 
        </bean> 
        -->
        
         <!-- 
        <bean class="com.predic8.membrane.core.interceptor.schemavalidation.SOAPMessageValidatorInterceptor" init-method="init">
          <property name="wsdl" value="http://www.predic8.com:8080/material/ArticleService?wsdl" />
        </bean>
      	 -->     
    </interceptors>
  </transport>

  <!-- 
  An exchange store saves a request/response message pair. 
  There are different implementations for the exchange store.
  
  - MemoryExchangeStore
    Exchanges are stored in memory. The monitor GUI needs this store to populate the exchanges table.
        
  - ForgetfulExchangeStore 
    Exchanges are not stored. This is a default store of the router.
       
  -->	
  <memoryExchangeStore id="exchangeStore" />

  <!--
  <forgetfulExchangeStore id="exchangeStore" />
  -->
  
  <bean id="configurationManager" class="com.predic8.membrane.core.ConfigurationManager">
    <property name="configurationStore">
      <bean class="com.predic8.membrane.core.io.ConfigurationFileStore" />
    </property>
 
    <property name="configuration">
      <bean class="com.predic8.membrane.core.Configuration">
        <property name="adjustHostHeader" value="true" />
        <property name="indentMessage" value="true" />
        <property name="trackExchange" value="false" />
      </bean>
    </property>
  </bean>

  <bean id="roundRobinBalancer" class="com.predic8.membrane.core.interceptor.balancer.LoadBalancingInterceptor">
    <property name="displayName" value="roundRobinBalancer" />
    <property name="endpoints">
      <list>
        <value>www.thomas-bayer.com:80</value>
        <value>www.thomas-bayer.com</value>
      </list>
    </property>
    <property name="dispatchingStrategy">
      <bean class="com.predic8.membrane.core.interceptor.balancer.RoundRobinStrategy" />
    </property>
  </bean>

  <bean id="byThreadBalancer" class="com.predic8.membrane.core.interceptor.balancer.LoadBalancingInterceptor">
    <property name="displayName" value="byThreadBalancer" />
    <property name="endpoints">
      <list>
        <value>www.thomas-bayer.com:80</value>
        <value>www.thomas-bayer.com</value>
	  </list>
    </property>
    <property name="dispatchingStrategy">
      <bean class="com.predic8.membrane.core.interceptor.balancer.ByThreadStrategy">
        <property name="maxNumberOfThreadsPerEndpoint" value="10" />
        <property name="retryTimeOnBusy" value="1000" />
      </bean>
    </property>
  </bean>
  
  <!--
  <bean id="statisticsCSVInterceptor"
		class="com.predic8.membrane.core.interceptor.statistics.StatisticsCSVInterceptor">
	<property name="fileName" value="C:\temp\exc-statistics.csv" />
	<property name="displayName" value="Statistics CSV Logger" />
  </bean>
  -->
  
   <!--
   Rewriter Interceptor 
   =======================================
   An interceptor that can rewrite or redirect URLs that are matched by an regular expression. One can use groups in the replacing URL to reference parts of the matched URL. 

   Ihe rewriter element contains mapping elements. Each element defines a regex and a url to replace by using the attributes regex and url. 
   -->  
	<rewriter>
		<map from="^/bank/(.*)" to="/axis2/$1" />
		<map from="^/static/(.*)" to="/$1" />
	</rewriter>
  
 
   <!--
   XSLT Transformation 
   =======================================
   An interceptor that can apply XSLT Transformations to the request and/or the response.

   The value of the property "requestXSLT" will by used as the location of the stylesheet that will by applied to the request. 
   If you choose a relative path it will by relative to MEMBRANE_HOME. If you leave the value blank or remove the property no transformation will by applied to the request.

   The value of the property "responseXSLT" will by used as the destination of the stylesheet that will by applied to the response. 
   If you choose a relative path it will by relative to MEMBRANE_HOME. If you leave the value blank or remove the property no transformation will by applied to the response.
   -->  
  <bean id="xsltTransformer" class="com.predic8.membrane.core.interceptor.xslt.XSLTInterceptor">
    <property name="requestXSLT" value="" /> 
    <property name="responseXSLT" value="examples/xslt/customer2person.xsl" /> 
  </bean> 
  
  <!-- 
  Interceptor for access control. Only authorized clients can access 
  services. Mapping of public available services and clients is specified in 
  XML file. Value of aclFilename property is path to mapping file. 
  -->
  <bean id="accessControlInterceptor" class="com.predic8.membrane.core.interceptor.acl.AccessControlInterceptor">
    <property name="displayName" value="Access Control List Interceptor" />
    <property name="aclFilename" value="temp\acl.xml" />
  </bean>

  <bean id="administrationInterceptor" class="com.predic8.membrane.core.interceptor.administration.AdministrationInterceptor" />

  <bean id="basicAuthenticationInterceptor" class="com.predic8.membrane.core.interceptor.authentication.BasicAuthenticationInterceptor">
    <property name="users">
    	<map>
    		<entry key="membrane" value="membrane"/>
    	</map>
    </property>
  </bean>
  <!--
  Configuration of DataSource 
  ============================ 
  If you have activated bean "statisticsJDBCInterceptor", you need to adjust one of the 
  bean definitions below. StatisticsJDBCInterceptor uses instance of javax.sql.DataSource 
  to manage connection pooling. Please provide all necessary information for correct 
  initialization of data source. Note: you have to put third party libraries in lib 
  directory before using JDBC interceptor.
  -->
  <!-- 
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
    <property name="driverClassName" value="com.mysql.jdbc.Driver" /> 
    <property name="url" value="jdbc:mysql://localhost:3306/membrane" /> 
    <property name="username" value="root" /> 
    <property name="password" value="root" /> 
  </bean> 
  -->
  <!-- 
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
    <property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver"/> 
    <property name="url" value="jdbc:derby://localhost:1527/membranedb-test;create=true"/>
    <property name="username" value="APP" /> 
    <property name="password" value=" " /> 
  </bean>
  -->
  <!-- 
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> 
    <property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:your-database"/>
    <property name="username" value="your-username" /> 
    <property name="password" value="your-password" /> 
  </bean>
  -->
  
	 <!--
	   REST 2 SOAP Interceptor 
	   =======================================
	   This interceptor can be used to map HTTP requests to SOAP operation calls.
	   
	   The interceptor is configured by the property mappings. It contains a map. Each key is a regular expression that is matched against the URI of the request. 
	   The data mapped by the key that first matches the URI is taken to transform the HTTP request and to call the SOAP operation. 
	   The transformation is done by a XSLT stylesheet that is applied to a XML document that is constructed from the HTTP request by the interceptor.  
	   The data for the transformation is given by a map that contains the keys SOAPAction, SOAPURL, requestXSLT and responseXSLT.

	   The value of the property "SOAPAction" is taken for the SOAPAction header field of the HTTP request.

	   The value of the property "SOAPURL" is used as the endpoint address of the service.
	     	
       The value of the property "requestXSLT" will by used as the location of the stylesheet that will by applied to the request. The stylesheet is used to create the SOAP envelope required by the service.	
       
       The value of the property "responseXSLT" will by used as the location of the stylesheet that will by applied to the response. The stylesheet can be used to extract the content of the SOAP response.
	   
	   If you choose a relative path for requestXSLT or requestXSLT, it will by relative to MEMBRANE_HOME. You also can use the prefix classpath: to reference a stylesheet from the classpath.
	 -->
	 <bean id="rest2SoapInterceptor" class="com.predic8.membrane.core.interceptor.rest.REST2SOAPInterceptor">
      <property name="displayName" value="REST 2 SOAP Interceptor" />
	  <property name="mappings">
	  	<map>
	  		<entry key="/bank/.*">
	  			<map>
	  				<entry key="SOAPAction" value=""/>
	  				<entry key="SOAPURI" value="/axis2/services/BLZService" />
	  				<entry key="requestXSLT" value="examples/rest2soap/blz-httpget2soap-request.xsl" />
	  				<entry key="responseXSLT" value="examples/rest2soap/strip-soap-envelope.xsl" />          				
	  			</map>
	  		</entry>
	  	</map>
	  </property> 
	</bean> 

  <bean id="webServerInterceptor" class="com.predic8.membrane.core.interceptor.server.WebServerInterceptor">
    <property name="displayName" value="Web Server" />
    <property name="docBase" value="docBase" />
  </bean>
  	    
 
  <bean id="clusterNotificationInterceptor" class="com.predic8.membrane.core.interceptor.balancer.ClusterNotificationInterceptor" >
  	<property name="validateSignature" value="true" />
  </bean>
    
  <!--
  Content Based Routing 
  ============================ 
  The XPathCBRInterceptor allows you to forward request based on a XPath expression. The routing rules are given as a list of pairs. 
  Each pair consist of a XPath expression and a URL. The request will be forwarded to the URL thats associated XPath expression returns true when evaluated against the content of the request. If more than one XPath expression evaluates to true than the first of the list will be taken.
  -->
  <bean id="xPathCBR" class="com.predic8.membrane.core.interceptor.cbr.XPathCBRInterceptor">
  	<!-- The routes property contains the list that defines the routing rules. The list contains pairs that consist of a XPath expression and a URL. -->
  	<property name="routes">
  		<list>
  			<!-- Each Route consists of a XPath expression and a URL -->
  			<bean class="com.predic8.membrane.core.interceptor.cbr.Route" >
  				<!-- This is the XPath expression that is evaluated against the request content -->
  				<property name="xPath" value="//blz:blz"/>
  				<!-- This is the URL where the request is forwarded to, if the XPath evaluates to true.-->
  				<property name="url" value="http://www.thomas-bayer.com:80/axis2/services/BLZService"/>
  			</bean>
  			<bean class="com.predic8.membrane.core.interceptor.cbr.Route" >
  				<property name="xPath" value="//convert"/>
  				<property name="url" value="http://www.thomas-bayer.com:80/axis2/services/CSV2XMLService"/>
  			</bean>
  		</list>
  	</property>
  </bean>
    
</beans>
