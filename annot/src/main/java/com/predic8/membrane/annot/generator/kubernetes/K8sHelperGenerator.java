/* Copyright 2009, 2021 predic8 GmbH, www.predic8.com

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License. */
package com.predic8.membrane.annot.generator.kubernetes;

import com.predic8.membrane.annot.model.*;

import javax.annotation.processing.*;
import javax.lang.model.element.*;
import javax.tools.*;
import java.io.*;
import java.util.*;
import java.util.stream.*;

import static java.util.stream.Stream.*;

/**
 * Autogenerates a helper file for JSON parsing
 */
public class K8sHelperGenerator extends AbstractK8sGenerator {

    public K8sHelperGenerator(ProcessingEnvironment processingEnv) {
        super(processingEnv);
    }

    @Override
    protected String fileName() {
        return K8sHelperGenerator.class.getSimpleName() + "AutoGenerated";
    }

    @Override
    protected void write(Model m) {
        m.getMains().forEach(main -> {
            try {
                List<Element> sources = new ArrayList<>(main.getInterceptorElements());
                sources.add(main.getElement());

                FileObject fileObject = processingEnv.getFiler().createSourceFile(
                        main.getAnnotation().outputPackage() + "." + fileName(),
                        sources.toArray(new Element[0]));

                try (BufferedWriter w = new BufferedWriter(fileObject.openWriter())) {
                    assemble(w, main);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    private void assemble(Writer w, MainInfo main) throws IOException {
        writeCopyright(w);
        writeClassContent(w, main);
    }

    private void writeCopyright(Writer w) throws IOException {
        appendLine(w,
                "/* Copyright 2021 predic8 GmbH, www.predic8.com",
                "",
                "   Licensed under the Apache License, Version 2.0 (the \"License\");",
                "   you may not use this file except in compliance with the License.",
                "   You may obtain a copy of the License at",
                "",
                "   http://www.apache.org/license/LICENSE-2.0",
                "",
                "   Unless required by applicable law or agreed to in writing, software",
                "   distributed under the License is distributed on an \"AS IS\" BASIS,",
                "   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
                "   See the License for the specific language governing permissions and",
                "   limitations under the License.",
                "*/"
        );
    }

    private void writeClassContent(Writer w, MainInfo mainInfo) throws IOException {
        appendLine(w,
                "",
                "package " + mainInfo.getAnnotation().outputPackage() + ";",
                "",
                "import com.predic8.membrane.core.proxies.Proxy;",
                "import com.predic8.membrane.core.interceptor.Interceptor;",
                "",
                "import java.util.Map;",
                "import java.util.List;",
                "import java.util.HashMap;",
                "import java.util.ArrayList;",
                "",
                "/**",
                "  * Automatically generated by {@link " + K8sHelperGenerator.class.getName() + "}",
                "  */",
                "public class " + fileName() + " {",
                "    public static Map<String, Class<?>> elementMapping = new HashMap<>();",
                "    public static Map<String, Map<String, Class<?>>> localElementMapping = new HashMap<>();",
                "    public static List<String> crdSingularNames = new ArrayList<>();",
                "",
                "    private static void localElementMappingPut(String context, String name, Class<?> clazz) {",
                "        Map<String, Class<?>> local = localElementMapping.get(context);",
                "        if (local == null) {",
                "            local = new HashMap<>();",
                "            localElementMapping.put(context, local);",
                "            localElementMapping.put(context.toLowerCase(), local);",
                "        }",
                "        local.put(name, clazz);",
                "        local.put(name.toLowerCase(), clazz);",
                "    }",
                "",
                "    public static Class<?> getLocal(String context, String key) {",
                "        Map<String, Class<?>> local = localElementMapping.get(context);",
                "        if (local == null)",
                "            return null;",
                "        return local.get(key);",
                "    }",
                "",
                "    static {",
                        "",
                        assembleCrdSingularNames(mainInfo),
                        "",
                        assembleElementMapping(mainInfo),
                "    }",
                "}"
        );
    }

    private String assembleElementMapping(MainInfo main) {
        return concat(
                // global
                main.getIis().stream()
                .filter(ei -> ei.getAnnotation().topLevel())
                .map(ei -> String.format("        elementMapping.put(\"%s\", %s.class);" + System.lineSeparator()
                                + "        elementMapping.put(\"%s\", %s.class);",
                        ei.getAnnotation().name(),
                        ei.getElement().getQualifiedName(),
                        ei.getAnnotation().name().toLowerCase(),
                        ei.getElement().getQualifiedName())),
                // non-global
                main.getIis().stream()
                        .flatMap(ei -> ei.getCeis().stream().map(cei -> Pair.of(ei, cei)))
                        .flatMap(p -> main.getChildElementDeclarations().get(p.y.getTypeDeclaration())
                                .getElementInfo().stream().map(ei -> Pair.of(p.x, ei)))
                        .filter(p -> !p.y.getAnnotation().topLevel())
                        .map(p -> String.format("        localElementMappingPut(\"%s\", \"%s\", %s.class);",
                                p.x.getAnnotation().name(),
                                p.y.getAnnotation().name(),
                                p.y.getElement().getQualifiedName())))
                .collect(Collectors.joining(System.lineSeparator()));
    }

    private String assembleCrdSingularNames(MainInfo main) {
        return getRulesStream(main)
                .map(ei -> ei.getAnnotation().name().toLowerCase())
                .map(s -> "        crdSingularNames.add(\"" + s + "\");")
                .collect(Collectors.joining(System.lineSeparator()));
    }

    private static class Pair<X, Y> {
        X x;
        Y y;
        public Pair(X x, Y y) {
            this.x = x;
            this.y = y;
        }

        public static <X, Y> Pair<X, Y> of(X x, Y y) {
            return new Pair<>(x, y);
        }

        public X getX() {
            return x;
        }

        public Y getY() {
            return y;
        }
    }
}
