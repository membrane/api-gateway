<!--

	Only for Reference!
	===================
	This file is a demo for various features only. The configuration will not work
	in most environments (because of the HTTP proxy configuration). See the 
	examples/* directory for working configuration files.
	

	Routing Configuration
	=====================
	Here you can configure routing rules for Membrane API Gateway. It
	contains rules to show how to set up routing. Please make sure to
	remove these rules before you put the router into production.
	
	Changes to this file will be picked up almost instantly if Membrane is
	running	once this file has been saved. Any dynamic configuration changes
	made (for example, via the adminConsole) will be forgotten.
-->
<spring:beans xmlns="http://membrane-soa.org/proxies/1/"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
					    http://membrane-soa.org/proxies/1/ http://membrane-soa.org/schemas/proxies-1.xsd">

	<!-- maxDays with a value of 30 triggers removal of logs after 30 days -->
	<fileExchangeStore
		id="myFileExchangeStore"
		dir="./exchanges"
		maxDays="30" />

	<router hotDeploy="true" retryInitInterval="30000" exchangeStore="myFileExchangeStore" >
	    
	    <!--
	    	Configure the global interceptor chain used to handle all incoming HTTP requests.
	    	If <transport>...</transport> is missing from the configuration, the default 
	    	configuration is assumed:
	    	
	    		<transport>
					<ruleMatching />
					<logContext />
					<exchangeStore />
					<dispatching />
					<reverseProxying />
					<userFeature />
					<internalRouting />
					<httpClient />
	    		</transport>


			An "interceptor chain" describes the general concept behind Membrane's 
			<transport>, <soapProxy>, <serviceProxy> and <proxy> configuration elements.
			A "chain" consists of a list of "interceptors". Interceptors may alter the
			HTTP request or response (or both).
			
			Corresponding to the default configuration of the <transport> element
			(see above), is the following exchange flow:
					
	    	
			       inbound HTTP                   HTTP response               
			          request                                          
			            |                               A               
			            V                               |               
			+——————————————————————————————————————————————————————————+
			|     rule matching                         —              |
			+——————————————————————————————————————————————————————————+
			            |                               A               
			            V                               |               
			+——————————————————————————————————————————————————————————+
			|                     exchangeStore                        |
			+——————————————————————————————————————————————————————————+
			            |                               A               
			            V                               |               
			+——————————————————————————————————————————————————————————+
			|      dispatching                          —              |
			+——————————————————————————————————————————————————————————+
			            |                               A               
			            V                               |               
			+——————————————————————————————————————————————————————————+
			|                      user feature                        |
			|                  (executes a sub—chain)                  |
			+——————————————————————————————————————————————————————————+
			            |                               A               
			            V                               |               
			+——————————————————————————————————————————————————————————+
			|                       httpClient                         |
			|                        |      A                          |
			+————————————————————————+——————+——————————————————————————+
			                         |      |
			               outbound  |      |
			           HTTP request  |      |
			                         V      |
			                   (some other HTTP server)
	    	 
	    -->
	    <transport>
	    	
	    	<!-- step 1: select the first matching <soapProxy>, <serviceProxy>
	    		or <proxy> for the incoming HTTP request.
	    	-->
			<ruleMatching />

			<!-- step 2: add log context: this enables the proxy handling this HTTP
			     request to be printed
			-->
			<logContext />
			
			<!-- step 3:
				store the HTTP request (or response on the way back) in the
				specified store (a collection of file system directories).
			-->
			<exchangeStore name="myFileExchangeStore" />
			
			<!-- step 4: set the exchange's destination to the <*proxy>'s target. -->
			<dispatching />
			
			<!-- step 5:
				Adjust host names in the HTTP request "Destination" header
				and HTTP response "Location" header.
			-->
			<reverseProxying />
			
			<!-- step 6:
				Execute the <*proxy>'s interceptor sub-chain.
				
				Usually, this is where the magic happens: An admin configures
				a <soapProxy>, similar to the examples shown below. A custom
				<transport> configuration is in most cases not even necessary,
				as the <userFeature> interceptor is contained in the default
				configuration which "includes" the sub-chain as configured by
				the admin.
			-->
			<userFeature />

			<!-- step 7: Routes URLs like internal://$PROXY_NAME/$PROXY_PATH to other
			     proxies.
			-->
			<internalRouting />
			
			<!-- step 8:
				Forward the (altered) HTTP request to the target.
				
				If successful, all steps will be "unwound" and all interceptor steps
				executed so far will get the chance to alter the response.
				The unwinding takes place in the reverse order.
			-->
			<httpClient>
				<!-- Configure all outbound HTTP connections for this router. -->
				<httpClientConfig>
					<!-- configure timeouts -->
					<connection timeout="10000" keepAliveTimeout="4000" />
					<!-- use a HTTP proxy -->
					<!-- <proxy host="proxy.predic8.de" port="3128" /> -->
					<!-- use Basic Authentication -->
					<authentication username="john" password="secret" />
				</httpClientConfig>
			</httpClient>

	    </transport>

		<!--
			Serves static files like a webserver.

			Try: curl localhost:2001/static/proxies.xml

			Attention: Do not provide access to the conf folder in production!

		 -->
		<api port="2001">
			<!-- Answers all requests incoming on port 2001 starting with "/static/". -->
			<path>/static/</path>
			
			<!-- Removes the leading "/static" from the request's destination -->
			<rewriter>
				<map from="/static(/.*)" to="$1"/>
			</rewriter>
			
			<!--
				Maps requests into the filesystem to the "conf" subdirectory.
				The <webServer> always terminates the interceptor (sub-)chain and reverses
				the Exchange flow, either returning "200 OK" and the contents of a file,
				or "404 Not Found".
			-->
			<webServer docBase="." /> 
		</api>
	
		<!--
			Forwards HTTP requests on port 2001 to a local web container
			running on port 8080, maybe a Tomcat server.
		-->
		<api port="2001">
			<target host="localhost" port="8080"/>
		</api>

		<!--
			Sets up the Administration Web Interface on port 9000.
			
			This <serviceProxy>'s sub-chain is the following:
			
			+————————————————|———————————————————————————————————————————+
			|   userFeature  |                             A             |
			|                |                             |             |
			|                V                             |             |
			|   +————————————————————————————————————————————————————+   |
			|   |   basic authentication                   —         |   |
			|   +————————————————————————————————————————————————————+   |
			|                |                             A             |
			|                V                             |             |
			|   +————————————————————————————————————————————————————+   |
			|   |   access control list                    —         |   |
			|   +————————————————————————————————————————————————————+   |
			|                |                             A             |
			|                V                             |             |
			|   +————————————————————————————————————————————————————+   |
			|   |                    admin console                   |   |
			|   +————————————————————————————————————————————————————+   |
			|                                                            |
			+————————————————————————————————————————————————————————————+
			
			-->
		<serviceProxy name="Console" port="9000">
		
			<!-- sub-step 1: require the HTTP client to provide a password to us. -->
			<basicAuthentication>
				<user name="admin" password="membrane" />
			</basicAuthentication>
				
			<!-- sub-step 2: allow requests only from these network addresses (see
				the file "conf/acl.xml" for the list). -->
			<accessControl file="acl.xml" />
			
			<!-- sub-step 3:
				Display the admin console.
				
				(Chain handling will stop at this point and the response
				handling will commence. This means that the exchange will *not*
				continue <transport>'s global chain to the next interceptor (<httpClient>),
				but the step-unwinding will start, as <adminConsole/> generates
				a HTTP response on its own without forwarding the request to
				some other HTTP server.)
			-->
			<adminConsole />
		</serviceProxy>
	 
	 </router>

</spring:beans>