<spring:beans xmlns:spring="http://www.springframework.org/schema/beans"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns="http://membrane-soa.org/proxies/1/" xmlns:lang="http://www.springframework.org/schema/lang"
              xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
					    http://membrane-soa.org/proxies/1/ http://membrane-soa.org/schemas/proxies-1.xsd http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd">

    <spring:bean class="com.predic8.membrane.core.interceptor.apikey.stores.ApiKeyFileStore">
        <spring:property name="location" value="./keys.txt" />
    </spring:bean>

    <router>

        <api port="9000">
            <adminConsole />
        </api>

        <api port="9090" name="Management API">
            <setHeader name="Access-Control-Allow-Origin" value="*" />
            <setHeader name="Access-Control-Allow-Methods" value="*" />
            <setHeader name="Access-Control-Allow-Headers" value="*" />
            <setHeader name="Access-Control-Expose-Headers" value="*" />
            <adminApi />
            <static>
                Ok
            </static>
            <return />
        </api>

        <api port="2000" name="OpenAPI">
            <openapi location="fruitshop-api.yml" />
            <target host="localhost" port="3000" />
        </api>

        <api port="2001" name="OpenAPI Validation">
            <openapi location="security-api-v1.yml"
                     validateRequests="yes"
                     validateResponses="no"
                     validationDetails="yes" />
            <target host="localhost" port="3000" />
        </api>

        <api port="2002" name="Path Regex">
            <path isRegExp="true">/foo</path>
            <target host="localhost" port="3000" />
        </api>

        <api port="2003" name="Rate Limiter">
            <rateLimiter requestLimit="3" requestLimitDuration="PT30S"/>
            <target host="localhost" port="3000" />
        </api>

        <api port="2004" name="JWT Auth">
            <jwtAuth expectedAud="api://2axxxx16-xxxx-xxxx-xxxx-faxxxxxxxxf0">
                <jwks jwksUris="https://login.microsoftonline.com/common/discovery/keys"/>
            </jwtAuth>
            <target host="localhost" port="3000" />
        </api>

        <api port="2005" name="API Key">
            <apiKey>
                <keys>
                    <secret value="demo-key-foobar" />
                </keys>
                <headerExtractor />
                <queryParamExtractor name="X-Api-Key" />
            </apiKey>
            <target host="localhost" port="3000" />
        </api>

        <api port="2006" name="NTLM Auth">
            <ntlm user="X-Username" pass="X-Password" />
            <target host="localhost" port="3000" />
        </api>

        <api port="2007" name="Basic Authentication">
            <basicAuthentication>
                <user name="admin" password="adminadmin" />
                <user name="guest" password="guestguest" />
            </basicAuthentication>
            <target host="localhost" port="3000" />
        </api>

        <api port="2008" name="Token Validator">
            <tokenValidator endpoint="http://localhost:7007/oauth2/userinfo"/>
            <target host="localhost" port="3000" />
        </api>

        <api port="2009" name="OAuth2 Resource">
            <oauth2Resource2>
                <membrane src="https://accounts.google.com"
                          clientId="INSERT_CLIENT_ID"
                          clientSecret="INSERT_CLIENT_SECRET"
                          scope="email profile"
                          subject="sub"/>
            </oauth2Resource2>
            <target host="localhost" port="3000" />
        </api>

        <api port="2010" name="OAuth2 Auth Server">
            <oauth2authserver issuer="http://localhost:7000">
                <!-- UserDataProvider is exchangeable, e.g. for a database table -->
                <staticUserDataProvider>
                    <user username="john" password="password" email="john@predic8.de" />
                </staticUserDataProvider>

                <staticClientList>
                    <client clientId="abc" clientSecret="def" callbackUrl="http://localhost:2000/oauth2callback" />
                </staticClientList>

                <!-- Generates tokens in the given format -->
                <bearerToken/>

                <claims value="aud email iss sub username">
                    <!-- Scopes are defined from the claims exposed above -->
                    <scope id="username" claims="username"/>
                    <scope id="profile" claims="username email"/>
                </claims>
            </oauth2authserver>
            <target host="localhost" port="3000" />
        </api>

        <api port="2011" name="XML Protection">
            <xmlProtection />
            <target host="localhost" port="3000" />
        </api>

        <api port="2012" name="JSON Protection">
            <jsonProtection maxTokens="15"
                            maxSize="110"
                            maxDepth="3"
                            maxStringLength="5"
                            maxKeyLength="1"
                            maxObjectSize="3"
                            maxArraySize="3" />
            <target host="localhost" port="3000" />
        </api>

        <api port="2013" name="Form Validation">
            <formValidation>
                <field name="name" regex="[a-zA-Z]+" />
            </formValidation>
            <target host="localhost" port="3000" />
        </api>

        <api port="2014" name="Throttle">
            <throttle delay="1000" maxThreads="5" busyDelay="3000"/>
            <target host="localhost" port="3000" />
        </api>

        <api port="2015" name="WebSocket">
            <webSocket url="http://my.websocket.server:1234">
                <wsStompReassembler>
                    <!-- modify the exchange to have a "[MEMBRANE]:" prefix -->
                    <groovy>
                        def method = exc.getRequest().getMethod();
                        def header = exc.getRequest().getHeader();
                        def body = exc.getRequest().getBodyAsStringDecoded();
                        if(exc.getRequest().getMethod() == "SEND")
                            body = "[MEMBRANE]: " + exc.getRequest().getBodyAsStringDecoded();
                        exc.setRequest(new Request.Builder().method(method).header(header).body(body).build());
                    </groovy>
                </wsStompReassembler>
                <!-- logs the content of a WebSocket frame to the console  -->
                <wsLog/>
            </webSocket>
            <target host="localhost" port="3000" />
        </api>

        <api port="2016" name="Log">
            <log/>
            <target host="localhost" port="3000" />
        </api>

        <api port="2017" name="TCP">
            <tcp />
            <target host="localhost" port="3000" />
        </api>

        <api port="2018" name="OpenTelemetry">
            <openTelemetry sampleRate="1.0">
                <otlpExporter host="localhost" port="4317"/>
            </openTelemetry>
            <target host="localhost" port="3000" />
        </api>

        <api port="2019" name="Prometheus">
            <prometheus />
            <target host="localhost" port="3000" />
        </api>

        <api port="2020" name="Statistics CSV">
            <statisticsCSV file="demofile" />
            <target host="localhost" port="3000" />
        </api>

        <api port="2021" name="WSDL Rewriter">
            <wsdlRewriter />
            <target host="localhost" port="3000" />
        </api>

        <api port="2022" name="Sample SOAP Service">
            <sampleSoapService />
        </api>

        <api port="2024" name="Conditional Rewriter">
            <if test="hasScopes({'admin', 'webmaster'})" language="SpEL">
                <rewriter>
                    <map from="^/store/(.*)" to="/shop/v2/$1" />
                </rewriter>
            </if>
            <target host="localhost" port="3000" />
        </api>

        <api port="2025" name="Index">
            <index />
            <target host="localhost" port="3000" />
        </api>

        <api port="2026" name="Balancer">
            <balancer>
                <xmlSessionIdExtractor namespace="http://chat.predic8.com/"
                                       localName="session" />
                <clusters>
                    <cluster name="Default">
                        <node host="node1.predic8.com" port="8080" />
                        <node host="node2.predic8.com" port="8090" />
                        <node host="node3.predic8.com" port="8100" />
                    </cluster>
                </clusters>
                <byThreadStrategy maxNumberOfThreadsPerEndpoint="10"
                                  retryTimeOnBusy="1000" />
            </balancer>
        </api>

        <api port="2027" name="ACME HTTP Challenge">
            <acmeHttpChallenge />
            <target host="localhost" port="3000" />
        </api>

        <api port="2028" name="Header Filter">
            <headerFilter>
                <include>Content.*</include>
                <include>Location</include>
                <exclude>.*</exclude>
            </headerFilter>
            <target host="localhost" port="3000" />
        </api>

        <api port="2029" name="API Docs">
            <apiDocs />
            <target host="localhost" port="3000" />
        </api>

        <api port="2030" name="REST to SOAP">
            <rest2Soap>
                <mapping regex="/bank/.*" soapAction=""
                         soapURI="/axis2/services/BLZService" requestXSLT="blz-request.xsl"
                         responseXSLT="blz-response.xsl" />
                <mapping regex="/shop/.*" soapAction=""
                         soapURI="/axis2/services/ShopService" requestXSLT="shop-request.xsl"
                         responseXSLT="shop-response.xsl" />
            </rest2Soap>
            <target host="localhost" port="3000" />
        </api>

        <api port="2031" name="Request Processors">
            <request>
                <json2Xml/>
                <clusterNotification validateSignature="true"
                                     keyHex="6f488a642b740fb70c5250987a284dc0" timeout="5000" />
                <javascript>
                    ({ id:7, city:"Berlin" })
                </javascript>
            </request>
            <target host="localhost" port="3000" />
        </api>

        <api port="2032" name="Response Processors">
            <response>
                <xml2Json/>
                <counter name="Node 1" />
                <soapStackTraceFilter />
                <xmlContentFilter xPath="//book/reviews" />
                <groovy>
                    exc.getResponse().setBodyContent("Example".getBytes())
                </groovy>
            </response>
            <target host="localhost" port="3000" />
        </api>

        <api port="2033" name="Template">
            <template contentType="application/json" pretty="yes">
                { "answer": ${params.answer} }
            </template>
            <target host="localhost" port="3000" />
        </api>

        <api port="2034" name="Return">
            <return statusCode="200" />
        </api>

        <api port="2035" name="Target with SSL">
            <target host="localhost" port="2001">
                <ssl/>
            </target>
        </api>

        <soapProxy port="2036" wsdl="https://www.predic8.de/city-service?wsdl">
            <validator />
        </soapProxy>

    </router>

</spring:beans>