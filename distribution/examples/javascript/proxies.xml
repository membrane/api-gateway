<spring:beans xmlns="http://membrane-soa.org/proxies/1/"
			  xmlns:spring="http://www.springframework.org/schema/beans"
			  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
					    http://membrane-soa.org/proxies/1/ http://membrane-soa.org/schemas/proxies-1.xsd">

	<!-- this is a Java string object defined as a spring bean. It serves as value for the X-Javascript header -->
	<spring:bean name="myBean" class="java.lang.String">
		<spring:constructor-arg value="Greetings from Javascript"/>
	</spring:bean>

	<router>

		<api port="2000">
			<request>
				<javascript>
					// Return Json as Map
					({ id:7, city:"Berlin" })
				</javascript>
			</request>
			<return contentType="application/json"/><!-- Return response to client -->
			<!-- <target host="myhost" port="myport"/> Instead forward to your backend -->
		</api>

		<api port="2010">
			<request>
				<javascript>
				// JSON to JSON transformation

				function convertDate(d) {
					return d.getFullYear() + "-" + ("0"+(d.getMonth()+1)).slice(-2) + "-" + ("0"+d.getDate()).slice(-2);
				}

				({
					id: json.id,
					date: convertDate(new Date(json.date)),
					client: json.customer,
					total: json.items.map(i => i.quantity * i.price).reduce((a,b) => a+b),
					positions: json.items.map(i => ({
						pieces: i.quantity,
						price: i.price,
						article: i.description
					}))
				})
				</javascript>
			</request>
			<return/>
		</api>

		<api port="2020">
			<request>
				<javascript>
					console.log("Request headers:")

					var fields = header.getAllHeaderFields();

					for(i=0;i &lt; fields.length;i++) {
						console.log(fields[i]);
					}
					CONTINUE
				</javascript>
			</request>
			<!-- Execute groovy-Interceptor in response flow -->
			<response>
				<javascript>
					header.add("X-Javascript", "42") // Set Header
					CONTINUE
				</javascript>
			</response>
			<target host="localhost" port="2030" />
		</api>

		<api port="2030">
			<request>
				<javascript>
					// Create response and set the body to the value of the Spring Bean
					Response.ok().body(spring.getBean('myBean')).build()
				</javascript>
			</request>
			<return/>
		</api>

	</router>

</spring:beans>
