<spring:beans xmlns="http://membrane-soa.org/proxies/1/"
	xmlns:spring="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
					    http://membrane-soa.org/proxies/1/ http://membrane-soa.org/schemas/proxies-1.xsd">

	<spring:bean name="myBean" class="java.lang.String">
		<spring:constructor-arg value="Greetings from Spring"/>
	</spring:bean>

	<router>

		<api port="2000">
			<request>
				<groovy>
					// Return Json as Map
					[id:7,city:'Berlin']
				</groovy>
			</request>
			<return contentType="application/json"/><!-- Return response to client -->
			<!-- <target host="myhost" port="myport"/> Instead forward to your backend -->
		</api>

		<api port="2010">
			<request>
				<groovy>
					// JSON to JSON transformation
					// The json-Variable contains the request or response body as JSON object.
					import java.text.*

					def dfIn = new SimpleDateFormat("d MMM yyyy",Locale.US)
					def dfOut = new SimpleDateFormat("yyyy-MM-dd")

					[
						id: json.id,
						date: dfOut.format(dfIn.parse(json.date)),
						client: json.customer,
						total: json.items.collect { it.price * it.quantity }.sum(),
						positions: json.items.collect {
							[
								pieces: it.quantity,
								price: it.price,
								article: it.description
							]
						}
					]
				</groovy>
			</request>
			<return/>
		</api>

		<api port="2020">
			<request>
				<groovy>
					println "Request headers:"
					header.allHeaderFields.each {
						print it 
					}
					CONTINUE
				</groovy>
			</request>
			<!-- Execute groovy-Interceptor in response flow -->
			<response>
				<groovy>
					header.add("X-Groovy", "42") // Set Header
					CONTINUE
				</groovy>
			</response>
			<target host="localhost" port="2030" />
		</api>
		
		<api port="2030">
			<request>
				<groovy>
					// Create response and set the body to the value of the Spring Bean
					Response.ok().body(spring.getBean('myBean')).build()
				</groovy>
			</request>
			<return/>
		</api>

	</router>
	
</spring:beans>
