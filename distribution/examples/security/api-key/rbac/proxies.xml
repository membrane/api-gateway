<spring:beans xmlns="http://membrane-soa.org/proxies/1/"
              xmlns:spring="http://www.springframework.org/schema/beans"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
					    http://membrane-soa.org/proxies/1/ http://membrane-soa.org/schemas/proxies-1.xsd">

    <!--
    API key stores are designed to retrieve key and scope data from various data sources.
    In this instance, we use an `ApiKeyFileStore`, which fetches API keys from a specified file.
    For global access across all API key interceptors, declare the stores as shown here.
    If an interceptor-specific store is needed, embed the store directly within the interceptor,
    using the syntax: <keyFileStore location="<xyz>" />.
    -->
    <spring:bean class="com.predic8.membrane.core.interceptor.apikey.stores.ApiKeyFileStore">
        <spring:property name="location" value="./demo-keys.txt" />
    </spring:bean>

    <router>

        <!--API key authorization, providing key is optional. Certain scopes allow for additional access rights.-->
        <api port="3000">
            <apiKey required="false">
                <headerExtractor name="X-Key" />
            </apiKey>

            <setProperty name="scopes" value="${scopes()}" />

            <if test="hasScope('admin')" language="SpEL">
                <!-- Use target, see above -->
                <template>
                    Only for admins!
                    Caller scopes: ${property.scopes}
                </template>
                <return />
            </if>

            <if test="hasScope({'finance','accounting'})" language="SpEL">
                <!-- Use target, see above -->
                <template>
                    Only for finance or accounting!
                    Caller scopes: ${property.scopes}
                </template>
                <return />
            </if>

            <!-- Use target, see above -->
            <template>Normal API</template>
            <return />
        </api>

    </router>

</spring:beans>